package ${basePackage}.${table.moduleName}.controller.${table.businessName};

##import cn.dev33.satoken.annotation.SaCheckPermission;
import org.springframework.web.bind.annotation.*;
import javax.annotation.Resource;
import org.springframework.validation.annotation.Validated;
#if ($needExcel == 2)import com.hujiang.common.excel.core.annotations.ResponseExcel;
import com.hujiang.common.excel.core.annotations.RequestExcel;
#else #end
#if ($sceneEnum.scene == 1)import cn.dev33.satoken.annotation.SaCheckPermission;#end

import io.swagger.annotations.*;

import javax.validation.constraints.*;
import java.util.*;

import ${PageResultClassName};
import ${CommonResultClassName};
import static ${CommonResultClassName}.success;


import ${OperateLogClassName};
import  ${OperateTypeEnumClassName};

import ${basePackage}.${table.moduleName}.controller.${table.businessName}.vo.*;
import ${basePackage}.${table.moduleName}.model.db.${table.className}DO;
import ${basePackage}.${table.moduleName}.convert.${table.className}Convert;
import ${basePackage}.${table.moduleName}.service.${table.className}Service;

@Api(tags = "${table.classComment}")
@RestController
##二级的 businessName 暂时不算在 HTTP 路径上，可以根据需要写
@RequestMapping("/${simpleClassName_strikeCase}")
public class ${table.className}Controller {

    @Resource
    private ${table.className}Service ${classNameVar}Service;

    @PostMapping("/create")
    @ApiOperation("创建${table.classComment}")
    @SystemLog(module = "${table.classComment}", name = "${table.classComment}-新增", type = OperateTypeEnum.CREATE)
    #if ($sceneEnum.scene == 1)    @SaCheckPermission("${permissionPrefix}:add")
    #else #end
    public Result<${primaryColumn.javaType}> create${simpleClassName}(@Validated @RequestBody ${sceneEnum.prefixClass}${table.className}CreateReqVO createReqVO) {
        return success(${classNameVar}Service.create${simpleClassName}(createReqVO));
    }

    @PostMapping("/update")
    @ApiOperation("更新${table.classComment}")
    @SystemLog(module = "${table.classComment}", name = "${table.classComment}-修改", type = OperateTypeEnum.UPDATE)
     #if ($sceneEnum.scene == 1)    @SaCheckPermission("${permissionPrefix}:update")
    #else #end
    public Result<Boolean> update${simpleClassName}(@Validated @RequestBody ${sceneEnum.prefixClass}${table.className}UpdateReqVO updateReqVO) {
        ${classNameVar}Service.update${simpleClassName}(updateReqVO);
        return success(true);
    }

    @PostMapping("/delete")
    @ApiOperation("删除${table.classComment}")
    @SystemLog(module = "${table.classComment}", name = "${table.classComment}-删除", type = OperateTypeEnum.DELETE)
    @ApiImplicitParam(name = "id", value = "编号", required = true, dataTypeClass = ${primaryColumn.javaType}.class)
#if ($sceneEnum.scene == 1)    @SaCheckPermission("${permissionPrefix}:del")
    #else #end
    public Result<Boolean> delete${simpleClassName}(@RequestParam("id") ${primaryColumn.javaType} id) {
        ${classNameVar}Service.delete${simpleClassName}(id);
        return success(true);
    }

    @GetMapping("/get")
    @ApiOperation("获得${table.classComment}")
    @SystemLog(module = "${table.classComment}", name = "${table.classComment}-查询", type = OperateTypeEnum.SELECT)
    @ApiImplicitParam(name = "id", value = "编号", required = true, example = "1024", dataTypeClass = ${primaryColumn.javaType}.class)
    #if ($sceneEnum.scene == 1)    @SaCheckPermission("${permissionPrefix}:detail")
    #else #end
    public Result<${sceneEnum.prefixClass}${table.className}RespVO> get${simpleClassName}(@RequestParam("id") ${primaryColumn.javaType} id) {
        ${table.className}DO ${classNameVar} = ${classNameVar}Service.get${simpleClassName}(id);
        return success(${table.className}Convert.INSTANCE.convert(${classNameVar}));
    }


    @PostMapping("/list")
    @ApiOperation("获得${table.classComment}列表")
    @SystemLog(module = "${table.classComment}", name = "${table.classComment}-列表查询", type = OperateTypeEnum.SELECT)
###if ($sceneEnum.scene == 1)    @SaCheckPermission("${permissionPrefix}:query")#end
    public Result<List<${sceneEnum.prefixClass}${table.className}RespVO>> list(@Validated  @RequestBody  ${sceneEnum.prefixClass}${table.className}ExportReqVO exportReqVO) {
            List<${table.className}DO> list = ${classNameVar}Service.get${simpleClassName}List(exportReqVO);
            return success(${table.className}Convert.INSTANCE.convertList(list));
    }

    @PostMapping("/page")
    @ApiOperation("获得${table.classComment}分页")
    @SystemLog(module = "${table.classComment}", name = "${table.classComment}-分页查询", type = OperateTypeEnum.SELECT)
###if ($sceneEnum.scene == 1)    @SaCheckPermission("${permissionPrefix}:query")#end
    public Result<IPage<${sceneEnum.prefixClass}${table.className}RespVO>> get${simpleClassName}Page(@Validated  @RequestBody  ${sceneEnum.prefixClass}${table.className}PageReqVO pageVO) {
        IPage<${sceneEnum.prefixClass}${table.className}RespVO> pageResult = ${classNameVar}Service.get${simpleClassName}Page(pageVO);
        return success(pageResult);
    }

    #if ($needExcel == 2)    @PostMapping("/export-excel")
    #else #end
    #if ($needExcel == 2)    @ApiOperation("导出${table.classComment} Excel")
    #else #end
    #if ($needExcel == 2)    @SystemLog(module = "${table.classComment}", name = "${table.classComment}-导出", type = OperateTypeEnum.EXPORT)
    #else #end
    #if ($sceneEnum.scene == 1 && $needExcel == 2)    @SaCheckPermission("${permissionPrefix}:export")
        #else #end
    #if ($needExcel == 2)    @ResponseExcel(name = "${table.classComment}")
        #else #end
    #if ($needExcel == 2)    public List<${sceneEnum.prefixClass}${table.className}ExcelVO> export${simpleClassName}Excel(@Validated  @RequestBody  ${sceneEnum.prefixClass}${table.className}ExportReqVO exportReqVO)  {
        #else #end
    #if ($needExcel == 2)        List<${table.className}DO> list = ${classNameVar}Service.get${simpleClassName}List(exportReqVO);
        #else #end
    #if ($needExcel == 2)        List<${sceneEnum.prefixClass}${table.className}ExcelVO> datas = ${table.className}Convert.INSTANCE.convertExcelList(list);
        #else #end
    #if ($needExcel == 2)        return datas;
        #else #end
    #if ($needExcel == 2)    }
        #else #end



    #if ($needExcel == 2)    @PostMapping("/import-excel")
    #else #end
    #if ($needExcel == 2)    @ApiOperation(value = "导入${table.classComment}  Excel", consumes = "multipart/form-data")
    #else #end
    #if ($needExcel == 2)    @SystemLog(module = "${table.classComment}", name = "${table.classComment}-导入", type = OperateTypeEnum.IMPORT)
    #else #end
    #if ($sceneEnum.scene == 1 && $needExcel == 2)    @SaCheckPermission("${permissionPrefix}:import")
        #else #end
    #if ($needExcel == 2)    public Result<String> import${simpleClassName}Excel(@RequestExcel List<${sceneEnum.prefixClass}${table.className}ExcelVO> dataList, BindingResult bindingResult) {
    #else #end
    #if ($needExcel == 2)        return success("success");
    #else #end
    #if ($needExcel == 2)    }
        #else #end

}
