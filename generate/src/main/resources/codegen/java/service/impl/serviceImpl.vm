package ${basePackage}.${table.moduleName}.service.impl;

import  ${basePackage}.${table.moduleName}.service.${table.className}Service;
import com.hujiang.framework.config.mybatisplus.service.impl.BaseService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import javax.annotation.Resource;

import java.util.*;
import ${basePackage}.${table.moduleName}.controller.${table.businessName}.vo.*;
import ${basePackage}.${table.moduleName}.model.db.${table.className}DO;
import com.github.pagehelper.PageHelper;
import ${PageResultClassName};
import com.hujiang.framework.config.mybatisplus.model.vo.PageRowVO;

import ${basePackage}.${table.moduleName}.convert.${table.className}Convert;
import ${basePackage}.${table.moduleName}.mapper.${table.className}Mapper;


/**
* ${table.classComment} Service 实现类
*
* @author ${table.author}
*/
@Service
public class ${table.className}ServiceImpl extends BaseService<${table.className}Mapper, ${table.className}DO> implements ${table.className}Service {

    @Resource
    private ${table.className}Mapper ${classNameVar}Mapper;

    @Transactional(rollbackFor = Exception.class)
    @Override
    public ${primaryColumn.javaType} create${simpleClassName}(${sceneEnum.prefixClass}${table.className}CreateReqVO createReqVO) {
        ${table.className}DO ${classNameVar} = ${table.className}Convert.INSTANCE.convert(createReqVO);
        ${classNameVar}Mapper.insert(${classNameVar});
        return ${classNameVar}.getId();
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public void update${simpleClassName}(${sceneEnum.prefixClass}${table.className}UpdateReqVO updateReqVO) {
        ${table.className}DO updateObj = ${table.className}Convert.INSTANCE.convert(updateReqVO);
        ${classNameVar}Mapper.updateById(updateObj);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public void delete${simpleClassName}(${primaryColumn.javaType} id) {
        ${classNameVar}Mapper.deleteById(id);
    }


    @Override
    public ${table.className}DO get${simpleClassName}(${primaryColumn.javaType} id) {
        return ${classNameVar}Mapper.selectById(id);
    }

    @Override
    public List<${table.className}DO> get${simpleClassName}List(Collection<${primaryColumn.javaType}> ids) {
        return ${classNameVar}Mapper.selectBatchIds(ids);
    }

    @Override
    public PageRowVO<${sceneEnum.prefixClass}${table.className}RespVO> get${simpleClassName}Page(${sceneEnum.prefixClass}${table.className}PageReqVO pageReqVO) {
        PageHelper.startPage(pageReqVO.getPageNum(), pageReqVO.getPageSize());
        List<${table.className}DO> pageResult = ${classNameVar}Mapper.selectPage(pageReqVO);
        PageInfo<${sceneEnum.prefixClass}${table.className}RespVO> pageInfo = ${table.className}Convert.INSTANCE.convertPage(new PageInfo<>(pageResult));
        return new PageRowVO<>(pageInfo);
   }

    @Override
    public List<${table.className}DO> get${simpleClassName}List(${sceneEnum.prefixClass}${table.className}ExportReqVO exportReqVO) {
        return ${classNameVar}Mapper.selectList(exportReqVO);
    }

}
